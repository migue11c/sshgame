// LOGIC

DICE:
Each die will represent a body part.
Head/Mind/Perception
Right arm/Force/Strength
Left arm/Technique/Dexterity
Right leg/Agility/Speed
Left leg/Stability
Chest/Heart/Emotion

// DATA
Refactor getPoi() to make a 3 dimensional data vector.
Refactor Poi rendering to look for points of interest in their respective sectors.
Also add 2 points of reference. Starting and selected.

CHECK ALL SAVE DATA TYPES.

SAVE DATA SPECIFICATIONS NEED TO BE VERY SPECIFIC AND HAVE EXACT SIZES
SO THEY CAN BE ENCODED, SENT OVER THE NETWORK, AND DECODED EXTREMELY EASILY.
SEND DATA IN BULK THROUGH TCP IT IS NOT THAT BIG DUDE.

MAKE SURE TO CREATE A SPECIAL PACKING AND UNPACKING CPP SO BOTH CLIENT AND SERVER CAN USE IT

PLAYER SAVE DATA STRUCTURE:
    Name (char[16])
    Faction (uint) // faction id
    Position // 3 position ids
        - Region (uint)
        - District (uint)
        - Place (uint)
    Time
        - Hour (uint)
        - Day (uint) // this var is ONLY checked and changed by the server
    Dice (uint[6]) // 6 dice
    Items (bool[128]) // 128 items, expand if necessary

WORLD DATA STRUCTURE:
    Name (char[32])
    MOTD (char[256])
    Day (uint)
    Danger (uint[25])
    Trains (array) // TBD
        Starting position
            - Region (uint)
            - District (uint)
            - Place (uint)
        Ending Position (same)
        Departure time (uint) // hour of departure


// VECTOR RENDER
Implement render.cpp directly into /include and resolve duplicate functions
After implementing render.cpp:
    - Change map render data directory
    - Use PlayerData for:
        - Camera anchor
        - Initializing camera
        - Hidden nodes
